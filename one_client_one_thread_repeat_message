

//ClientUI.java
package tmp;

import java.awt.Label;
import java.io.BufferedReader;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;


import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.GroupLayout.Alignment;


public class ClientUI extends javax.swing.JFrame {
    private Socket clientSocket=null; //声明客户机套接字
    private BufferedReader in;  //声明网络输入流
    private PrintWriter out; //声明网络输出流
   
    
    public ClientUI() {
        initComponents();
    }

   
    @SuppressWarnings("unchecked")
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtRemoteName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtRemotePort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        labeln = new javax.swing.JLabel();
        inputField = new javax.swing.JTextField(8);
        jLabel3 = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField(30);
        btnSpeak = new javax.swing.JButton();
        largePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("客户端   何明卿 2019-11-18");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "通信面板", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 18))); // NOI18N

        jLabel1.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel1.setText("服务器主机名：");

        txtRemoteName.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtRemoteName.setText("localhost");

        jLabel2.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel2.setText("服务器端口号：");

        txtRemotePort.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtRemotePort.setText("6");

        btnConnect.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btnConnect.setText("连接服务器");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        
        labeln.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        labeln.setText("消息条数：");

        inputField.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        inputField.setText("5");

        jLabel3.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel3.setText("待发送消息：");

        int n = Integer.parseInt(inputField.getText());
        txtInput.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	int newn2=n;
            	while(newn2>0)
            	{
                txtInputActionPerformed(evt);
                newn2=newn2-1;
            	}
            }
        });

        btnSpeak.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btnSpeak.setText("发    言");
        btnSpeak.addActionListener(new java.awt.event.ActionListener() {
        
        
        		 public void actionPerformed(java.awt.event.ActionEvent evt) {
        			int newn=n;
        			while(newn>0)
        			{
        				 
                     btnSpeakActionPerformed(evt);
                     newn=newn-1;
        			}
        			 txtInput.setText("");
                    
                     
       
                 }
        		
        
           
        });
       

        GroupLayout layout = new GroupLayout(leftPanel);
        leftPanel.setLayout(layout);

        // Turn on automatically adding gaps between components
        layout.setAutoCreateGaps(true);

        // Turn on automatically creating gaps between components that touch
        // the edge of the container and the container.
        layout.setAutoCreateContainerGaps(true);

        // Create a sequential group for the horizontal axis.

        GroupLayout.SequentialGroup hGroup = layout.createSequentialGroup();

        // The sequential group in turn contains two parallel groups.
        // One parallel group contains the labels, the other the text fields.
        // Putting the labels in a parallel group along the horizontal axis
        // positions them at the same x location.
        //
        // Variable indentation is used to reinforce the level of grouping.
        hGroup.addGroup(layout.createParallelGroup().
                 addComponent(jLabel1).addComponent(jLabel2).addComponent(labeln));
        hGroup.addGroup(layout.createParallelGroup().
                 addComponent(txtRemoteName).addComponent(txtRemotePort).addComponent(inputField));
        hGroup.addGroup(layout.createParallelGroup().
                addComponent(btnConnect));
        layout.setHorizontalGroup(hGroup);

        // Create a sequential group for the vertical axis.
        GroupLayout.SequentialGroup vGroup = layout.createSequentialGroup();

        // The sequential group contains two parallel groups that align
        // the contents along the baseline. The first parallel group contains
        // the first label and text field, and the second parallel group contains
        // the second label and text field. By using a sequential group
        // the labels and text fields are positioned vertically after one another.
        vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).
                 addComponent(jLabel1).addComponent(txtRemoteName));
        vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).
                 addComponent(jLabel2).addComponent(txtRemotePort));
        vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).
                addComponent(labeln).addComponent(inputField));
        vGroup.addGroup(layout.createParallelGroup(Alignment.CENTER).
                addComponent(btnConnect));
        layout.setVerticalGroup(vGroup);


        getContentPane().add(leftPanel, java.awt.BorderLayout.WEST);

        largePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "服务器Echo消息面板", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 18))); // NOI18N
        largePanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(8, 250));

        txtArea.setEditable(false);
      //  txtArea.setBackground(new java.awt.Color(255, 204, 255));
        txtArea.setColumns(200);
        txtArea.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        txtArea.setRows(200);
        jScrollPane1.setViewportView(txtArea);

        largePanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        JPanel inputPanel=new JPanel();
        inputPanel.add(jLabel3);
        inputPanel.add(txtInput);
        inputPanel.add(btnSpeak);
        JPanel inputPanel2=new JPanel();
        inputPanel2.add(labeln);
        inputPanel2.add(inputField);
        largePanel.add(inputPanel2,java.awt.BorderLayout.SOUTH);
        
        largePanel.add(inputPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(largePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //连接服务器
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            //获取服务器参数
            String remoteName=txtRemoteName.getText();
            int remotePort=Integer.parseInt(txtRemotePort.getText());
            //构建服务器Socket格式的地址
            SocketAddress remoteAddr=new InetSocketAddress(InetAddress.getByName(remoteName),remotePort);
            //1. 创建套接字clientSocket并连接到远程服务器
            clientSocket=new Socket();
            clientSocket.connect(remoteAddr);
            txtArea.append("连接服务器成功,会话开始...\n");
            //2. 创建绑定到套接字clientSocket上的网络输入流与输出流
            out=new PrintWriter(new OutputStreamWriter(clientSocket.getOutputStream(),"UTF-8"),true);
            in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream(),"UTF-8"));            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "连接错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        btnConnect.setEnabled(false);
    }//GEN-LAST:event_btnConnectActionPerformed
    //向服务器发送消息，并接收服务器的echo消息
    private void btnSpeakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpeakActionPerformed
        // TODO add your handling code here:
    
    
    		
    	
        //3. 根据服务器协议，在网络流上进行读写操作
        if (clientSocket==null) {
            JOptionPane.showMessageDialog(null, "请先检查服务器连接情况。\n发言之前要确保客户机连接到服务器！", "错误提示", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //获取待发消息
        String outStr=txtInput.getText();
        if (outStr.length()==0) { //待发消息框为空
            JOptionPane.showMessageDialog(null, "请输入发送消息！","提示",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        //发送
        out.println(outStr);
        
        try {
            //按照echo协议，客户机应立即接收服务器回送消息
            String inStr;
            inStr=in.readLine();
            //收到的echo消息加入下面的文本框
            txtArea.append("何明卿: "+inStr+"\n");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "客户机接收消息错误！","错误提示",JOptionPane.ERROR_MESSAGE);
        }
      
    	
    }//GEN-LAST:event_btnSpeakActionPerformed
    //按下回车键
    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
        btnSpeakActionPerformed(evt); //直接调用btnSpeak按钮的响应函数即可
    }//GEN-LAST:event_txtInputActionPerformed
    //关闭客户机之前的资源释放工作
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            //4. 关闭并销毁网络流
            if (in!=null) in.close();
            if (out!=null) out.close(); 
            //5. 关闭并销毁套接字
            if (clientSocket!=null) clientSocket.close();
        } catch (IOException ex) {   }          
    }//GEN-LAST:event_formWindowClosing

   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnSpeak;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labeln;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel largePanel;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextField inputField;
    private javax.swing.JTextField txtRemoteName;
    private javax.swing.JTextField txtRemotePort;
    // End of variables declaration//GEN-END:variables
}


//ServerUI.java
package tmp;

import java.awt.Graphics;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;


public class ServerUI extends javax.swing.JFrame {
    private ServerSocket listenSocket=null; //侦听套接字
    private Socket toClientSocket=null; //与客户机对话的套接字
    public static int clientCounts=0; //客户数量编号
   
    public ServerUI() {
        initComponents();
    }

   
   
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHostName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtHostPort = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        largePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        
       

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("何明卿  2019-11-18");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "服务器启动面板", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 18))); // NOI18N

        jLabel1.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel1.setText("服务器主机名：");

        txtHostName.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtHostName.setText("localhost");

        jLabel2.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jLabel2.setText("服务器端口：");

        txtHostPort.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtHostPort.setText("6");

        btnStart.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        btnStart.setText("启动服务器");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
       
        
        GroupLayout layout = new GroupLayout(leftPanel);
        leftPanel.setLayout(layout);

        // Turn on automatically adding gaps between components
        layout.setAutoCreateGaps(true);

        // Turn on automatically creating gaps between components that touch
        // the edge of the container and the container.
        layout.setAutoCreateContainerGaps(true);

        // Create a sequential group for the horizontal axis.

        GroupLayout.SequentialGroup hGroup = layout.createSequentialGroup();

        // The sequential group in turn contains two parallel groups.
        // One parallel group contains the labels, the other the text fields.
        // Putting the labels in a parallel group along the horizontal axis
        // positions them at the same x location.
        //
        // Variable indentation is used to reinforce the level of grouping.
        hGroup.addGroup(layout.createParallelGroup().
                 addComponent(jLabel1).addComponent(jLabel2));
        hGroup.addGroup(layout.createParallelGroup().
                 addComponent(txtHostName).addComponent(txtHostPort));
        hGroup.addGroup(layout.createParallelGroup().
                addComponent(btnStart));
        layout.setHorizontalGroup(hGroup);

        // Create a sequential group for the vertical axis.
        GroupLayout.SequentialGroup vGroup = layout.createSequentialGroup();

        // The sequential group contains two parallel groups that align
        // the contents along the baseline. The first parallel group contains
        // the first label and text field, and the second parallel group contains
        // the second label and text field. By using a sequential group
        // the labels and text fields are positioned vertically after one another.
        vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).
                 addComponent(jLabel1).addComponent(txtHostName));
        vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).
                 addComponent(jLabel2).addComponent(txtHostPort));
        vGroup.addGroup(layout.createParallelGroup(Alignment.CENTER).
                addComponent(btnStart));
        layout.setVerticalGroup(vGroup);


        getContentPane().add(leftPanel, java.awt.BorderLayout.WEST);

        largePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "服务器收到的客户机消息面板", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 1, 18))); // NOI18N
        largePanel.setLayout(new java.awt.BorderLayout());

        txtArea.setEditable(false);
       // txtArea.setBackground(new java.awt.Color(238, 185, 173));
       
        txtArea.setColumns(50);
        txtArea.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        largePanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(largePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //启动服务器
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
    
        try {
            btnStart.setEnabled(false); //禁用按钮，避免重复启动
            String hostName=txtHostName.getText();//主机名
            int hostPort=Integer.parseInt(txtHostPort.getText());//端口
            //构建服务器的SocketAddress格式地址
            SocketAddress serverAddr=new InetSocketAddress(InetAddress.getByName(hostName),hostPort);
            listenSocket=new ServerSocket(); //创建侦听套接字
            listenSocket.bind(serverAddr);  //绑定到工作地址 
            txtArea.append("服务器开始等待客户机连接...\n");             
        } catch (IOException ex) {    }
        

		 Th mythread=new Th();
		 mythread.setlistenSocket(listenSocket);
		 mythread.settoClientSocket(toClientSocket);
		 mythread.setclientCounts(clientCounts);
        mythread.settxtArea(txtArea);
		 Thread th=new Thread(mythread);
		 th.start();
		 
    }//GEN-LAST:event_btnStartActionPerformed
    //关闭服务器之前
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //关闭服务器之前释放套接字
        if (listenSocket!=null) listenSocket=null;
        if (toClientSocket!=null) toClientSocket=null;
    }//GEN-LAST:event_formWindowClosing

   
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel largePanel;
    private javax.swing.JPanel leftPanel;
    public static javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtHostName;
    private javax.swing.JTextField txtHostPort;
    // End of variables declaration//GEN-END:variables
}

class Th implements Runnable{
	private ServerSocket listenSocket;
	private Socket toClientSocket;
	private int clientCounts;
	private JTextArea txtArea;
	
	
     public void setlistenSocket(ServerSocket listenSocket)
     {
         this.listenSocket=listenSocket;
     }
     
     public void settoClientSocket(Socket toClientSocket)
     {
    	 this.toClientSocket=toClientSocket;
     }
     public void setclientCounts(int clientCounts)
     {
    	 this.clientCounts=clientCounts;
     }
     public void settxtArea(JTextArea txtArea)
     {
    	 this.txtArea=txtArea;
     }
     
		@Override
		public void run() {
			// TODO Auto-generated method stub
			 try {
                 while (true) { //处理客户机连接
                     toClientSocket=listenSocket.accept();//侦听并接受客户机连接
                     clientCounts++;//客户机数量加1
                     txtArea.append(toClientSocket.getRemoteSocketAddress()+ " 客户机编号: "+clientCounts+ " 会话开始...\n");
                     //创建客户线程clientThread，实现一客户一线程
                    Thread clientThread=new ClientThread(toClientSocket,clientCounts); 
                     clientThread.start(); //启动任务线程
                 } //end while                                     
             } catch (IOException ex) {
                 JOptionPane.showMessageDialog(null, ex.getMessage(), "错误提示", JOptionPane.ERROR_MESSAGE);
             }           
			
		}
}

//ClientThread.java
package tmp;


import java.io.BufferedReader;


import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ClientThread extends Thread {
    private Socket toClientSocket=null;//会话套接字
    private BufferedReader in; //网络输入流
    private PrintWriter out; //网络输出流
    private int clientCounts=0;//在线客户机总数
    public ClientThread(Socket toClientSocket,int clientCounts) { //构造函数
        this.toClientSocket=toClientSocket;
        this.clientCounts=clientCounts;
    }    
    @Override
    public void run(){
        try {          
            // 创建绑定到套接字toClientSocket上的网络输入流与输出流
            in=new BufferedReader(new InputStreamReader(toClientSocket.getInputStream(),"UTF-8"));
            out=new PrintWriter(new OutputStreamWriter(toClientSocket.getOutputStream(),"UTF-8"),true);
            //5. 根据服务器协议，在网络流上进行读写操作
            String recvStr;
            while ((recvStr=in.readLine())!=null){ //只要客户机不关闭，则反复等待和接收客户机消息
               Date date=new Date();
               DateFormat format=new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
               String time=format.format(date);
               ServerUI.txtArea.append(toClientSocket.getRemoteSocketAddress()+ " 客户机编号: "+clientCounts+" 消息："+recvStr+" ："+time+"\n"); //解析并显示收到的消息
               //按照echo协议原封不动回送消息
               out.println(toClientSocket.getLocalSocketAddress()+ " 客户机编号: "+clientCounts+" Echo消息："+recvStr+" : "+time);
            }//end while   
            ServerUI.clientCounts--; //客户机总数减1
            //远程客户机断开连接，线程释放资源
            if (in!=null) in.close();
            if (out!=null) out.close();
            if (toClientSocket!=null) toClientSocket.close();             
        }catch (IOException ex) {}
    } //end run
} //end class
